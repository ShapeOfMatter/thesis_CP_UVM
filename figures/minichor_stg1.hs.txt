type Unwrap (q :: LocTy) = forall ls a. Member q ls -> Located ls a -> a
type Unwraps (qs :: [LocTy]) = forall ls a. Subset qs ls -> Located ls a -> a

locally'     :: (KnownSymbol  l ) => (Unwrap  l  -> CLI IO a) -> Choreo '[l] a
congruently' :: (KnownSymbols ls) => (Unwraps ls -> a       ) -> Choreo ls   a

naked :: (KnownSymbols ps) => Subset ps qs -> Located qs a -> Choreo ps a
naked                         ownership       a            =
                                         congruently' (\un -> un ownership a)




-- start minichor on ln 15
locally'     :: (KnownSymbol  l ) => (              CLI IO a) -> Choreo '[l] a
naked :: (KnownSymbols ps) => Subset ps qs -> Located qs a -> Choreo ps a

congruentlyN :: (KnownSymbols ls) => Subset ls census ->
  (Subset ls owners1, Located owners1 arg1) ->
  ... ->
  (Subset ls ownersN, Located ownersN argN) ->
  (arg1 -> ... -> argN -> a) ->
  Choreo census (Located ls a)
congruentlyN present (owns1, arg1) ... (ownsN, argN) f =
    conclave present $ f <$> naked owns1 arg1 <*> ... <*> naked ownsN argN
