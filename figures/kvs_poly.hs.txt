handleRequest :: forall backups. (KnownSymbols backups)
              => Located '["primary"] Request
              -> (Located '["primary"] (IORef State), Faceted backups '[] (IORef State))
              -> Choreo ("primary" ': backups) IO (Located '["primary"] Response)
handleRequest request (primaryStateRef, backupsStateRefs) = broadcast (primary, request) >>= \case
    Put key value -> do oks <- parallel backups \backup un ->
                                   handlePut (viewFacet un backup backupsStateRefs) key value
                        gathered <- gather backups (primary @@ nobody) oks
                        locally primary \un -> if all isOk (un primary gathered)
                                                then handlePut (un primary primaryStateRef) key value
                                                else return errorResponse
    Get key -> locally primary \un -> handleGet (un primary primaryStateRef) key
  where primary = listedFirst ; backups = consSuper refl

kvs :: forall backups. (KnownSymbols backups)
    => Located '["client"] Request
    -> (Located '["primary"] (IORef State), Faceted backups '[] (IORef State))
    -> Choreo ("client" ': "primary" ': backups) IO (Located '["client"] Response)
kvs request stateRefs = do
    request' <- (client, request) ~> primary @@ nobody
    response <- conclave (primary @@ backups) (handleRequest request' stateRefs)
    (primary, flatten (First @@ nobody) (First @@ nobody) response) ~> client @@ nobody
  where client = listedFirst ; primary = listedSecond ; backups = consSuper $ consSuper refl
