game :: forall players m. (KnownSymbols players) => Choreo ("dealer" ': players) (CLI m) ()
game = do
  let players = consSuper (refl @players)
      dealer = listedFirst @"dealer"  -- `listedFirst` is basically just `First`.
      everyone = refl @("dealer" ': players)
  hand1 <- (fanIn everyone \(player :: Member player players) -> do
      card1 <- locally dealer (\_ -> getInput ("Enter random card for " ++ toLocTm player))
      (dealer, card1) ~> everyone
    ) >>= naked everyone
  wantsNextCard <- parallel players \_ _ -> do
      putNote $ "All cards on the table: " ++ show hand1
      getInput "I'll ask for another? [True/False]"
  hand2 <- fanOut \(player :: Member player players) ->
    conclave (inSuper players player @@ dealer @@ nobody) do
        let dealer = listedSecond @"dealer"
        choice <- broadcast (listedFirst @player, localize player wantsNextCard)
        if choice then do
            cd2 <- locally dealer (\_ -> getInput (toLocTm player ++ "'s second card:"))
            card2 <- broadcast (dealer, cd2)
            return [getLeaf hand1 player, card2]
        else return [getLeaf hand1 player]
  tblCrd <- locally dealer (\_ -> getInput "Enter a single card for everyone:")
  tableCard <- (dealer, tblCrd) ~> players
  void $ parallel players \player un -> do
      let hand = un player tableCard : viewFacet un player hand2
      putNote $ "My hand: " ++ show hand
      putOutput "My win result:" $ sum hand > card 19
